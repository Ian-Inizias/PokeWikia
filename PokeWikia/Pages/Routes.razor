@page "/routes"

@using PokeApiNet
@using PokeWikia.Utils.Models

@inject HttpClient Http

<PageTitle>Routes</PageTitle>

@if (_encounters.Count == 0)
{
    <h5>Loading encounters from file... (First time may take a while)</h5>
}
else
{
    <Fields>
        <Field ColumnSize="ColumnSize.Is6">
            <FieldLabel>Buscar rutas que contengan:</FieldLabel>
            <FieldBody>
                <TextEdit Text="@_pokemonNameFilterValue" TextChanged="@OnCustomFilterValueChanged"/>
            </FieldBody>
        </Field>
    </Fields>
    <DataGrid @ref="_encounterDataGrid"
              TItem="Encounters"
              Data="_encounters"
              DetailRowStartsVisible="false"
              CustomFilter="@OnCustomFilter"
              ShowPager>
        <DataGridColumns>
            <DataGridCommandColumn/>
            <DataGridColumn Field="@nameof(Encounters.RouteId)" Caption="RUTA"/>
        </DataGridColumns>
        <DetailRowTemplate>
            @{
                var encounterList = context.WildEncounters;
                <DataGrid @ref="_wildEncounterDataGrid"
                          TItem="WildEncounter"
                          Data="encounterList"
                          Sortable="false"
                          ShowCaptions="true"
                          DetailRowStartsVisible="false">
                    <DataGridColumns>
                        <DataGridCommandColumn/>
                        <DataGridColumn Field="@nameof(WildEncounter.EncounterType)" Caption="TIPO"/>
                        <DataGridColumn Field="@nameof(WildEncounter.Frequency)" Caption="FRE."/>
                    </DataGridColumns>
                    <DetailRowTemplate Context="encounterContext">
                        @{
                            var encounterRatioList = encounterContext.EncounterRatios;
                            <DataGrid @ref="_encounterRatioDataGrid"
                                      TItem="EncounterRatio"
                                      Data="encounterRatioList"
                                      Sortable="false"
                                      ShowCaptions="true">
                                <DataGridColumns>
                                    <DataGridCommandColumn/>
                                    <DataGridColumn Field="@nameof(EncounterRatio.Rate)" Caption="RATIO"/>
                                    <DataGridColumn Field="@nameof(EncounterRatio.Levels)" Caption="LV.">
                                        <DisplayTemplate Context="levelContext">
                                            @{
                                                var levels = (levelContext as EncounterRatio).Levels;
                                                <label>@levels[0] - @levels[1]</label>
                                            }
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn Field="@nameof(EncounterRatio.Pokemon)" Caption="IMG">
                                        <DisplayTemplate Context="pokeContext">
                                            @{
                                                var img = (pokeContext as EncounterRatio).Pokemon.Sprites.FrontDefault;
                                                <img alt="pokemon img" src="@img"/>
                                            }
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                </DataGridColumns>
                            </DataGrid>
                        }
                    </DetailRowTemplate>
                </DataGrid>
            }
        </DetailRowTemplate>
    </DataGrid>
}

@code {

    DataGrid<Encounters> _encounterDataGrid = new();
    DataGrid<WildEncounter> _wildEncounterDataGrid = new();
    DataGrid<EncounterRatio> _encounterRatioDataGrid = new();

    PokeApiClient _pokeApiClient = new();

    List<Encounters> _encounters = new();

    string _pokemonNameFilterValue;

    protected override async Task OnInitializedAsync()
    {
        var text = await Http.GetStringAsync("sample-data/sample-essentials-encounters.txt");

        var routes = text.Split("#-------------------------------");

        Encounters encounter = new() { WildEncounters = new List<WildEncounter>() };
        WildEncounter wildEncounter = new() { EncounterRatios = new List<EncounterRatio>() };
        EncounterRatio encounterRatio = new();

        foreach (var r in routes)
        {
            var lines = r.Split(Environment.NewLine);
            foreach (var l in lines)
            {
                if (l.StartsWith('#') || string.IsNullOrWhiteSpace(l))
                {
                    if (encounter.WildEncounters.Count > 0 || (encounter.WildEncounters.Count == 0 && wildEncounter.EncounterRatios.Count > 0))
                    {
                        encounter.WildEncounters.Add(wildEncounter);
                        wildEncounter = new WildEncounter { EncounterRatios = new List<EncounterRatio>() };
                        _encounters.Add(encounter);
                    }
                    encounter = new Encounters { WildEncounters = new List<WildEncounter>() };
                }
                else if (l.StartsWith('['))
                {
                    encounter.RouteId = l;
                }
                else if (!l.StartsWith(' '))
                {
                    if (wildEncounter.EncounterRatios.Count > 0) encounter.WildEncounters.Add(wildEncounter);

                    var typeString = l.Split(',').Length > 1 ? l.Split(',')[0] : l;
                    var type = Enum.Parse<EncounterTypes>(typeString);

                    wildEncounter = new WildEncounter
                    {
                        EncounterType = type,
                        Frequency = l.Split(',').Length > 1 ? int.Parse(l.Split(',')[1]) : 100,
                        EncounterRatios = new List<EncounterRatio>()
                    };
                }
                else if (l.StartsWith(' '))
                {
                    encounterRatio = new EncounterRatio
                    {
                        Rate = int.Parse(l.Split(',')[0]),
                        Pokemon = await _pokeApiClient.GetResourceAsync<Pokemon>(l.Split(',')[1]),
                        Levels = new[] { int.Parse(l.Split(',')[2]), int.Parse(l.Split(',')[3]) }
                    };
                    
                    wildEncounter.EncounterRatios.Add(encounterRatio);
                }
            }
        }
    }

    private Task OnCustomFilterValueChanged(string s)
    {
        _pokemonNameFilterValue = s;
        return _encounterDataGrid.Reload();
    }

    private bool OnCustomFilter(Encounters encounterData)
    {
        return string.IsNullOrEmpty(_pokemonNameFilterValue) || encounterData.WildEncounters.Any(w => w.EncounterRatios.Any(r => r.Pokemon.Name.Contains(_pokemonNameFilterValue, StringComparison.CurrentCultureIgnoreCase)));
    }

}