@page "/trainers"

@using PokeWikia.Utils.Models
@using PokeApiNet

@inject HttpClient Http

<PageTitle>Trainers</PageTitle>

<h1>Trainers</h1>

@if (_trainers.Count == 0)
{
    <h5>Loading random trainers... (First time may take a while)</h5>
}
else
{
    <DataGrid @ref="_trainerDataGrid"
              TItem="PokemonTrainer"
              Data="_trainers"
              DetailRowStartsVisible="false"
              ShowPager>
        <DataGridColumns>
            <DataGridCommandColumn/>
            <DataGridColumn Field="@nameof(PokemonTrainer.Name)" Caption="NOMBRE"/>
            <DataGridColumn Field="@nameof(PokemonTrainer.TrainerType)" Caption="TIPO ENTRENADOR"/>
            <DataGridColumn Field="@nameof(PokemonTrainer.Sprite)" Caption="IMG">
                <DisplayTemplate>
                    @{
                        var img = (context as PokemonTrainer).Sprite;
                        <img alt="trainer img" src="@img"/>
                    }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
        <DetailRowTemplate>
            @{
                <DataGrid @ref="_pokemonDataGrid"
                          TItem="Pokemon"
                          Data="context.Team"
                          Sortable="false"
                          ShowCaptions="true"
                          ReadData="async _ => await LoadTeam(context.Team)">
                    <DataGridCommandColumn/>
                    <DataGridColumn Field="@nameof(Pokemon.Name)" Caption="Nombre"/>
                    <DataGridColumn Field="@nameof(Pokemon.Id)" Caption="IMG">
                        <DisplayTemplate Context="pokeContext">
                            @{
                                var poke = pokeContext as Pokemon;
                                var img = poke.Sprites?.FrontDefault;
                                <img alt="pokemon img" src="@img"/>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </DetailRowTemplate>
        <NextPageButtonTemplate>
            <Icon Name="IconName.StepForward" TextColor="TextColor.Primary"/>
        </NextPageButtonTemplate>
        <PreviousPageButtonTemplate>
            <Icon Name="IconName.StepBackward" TextColor="TextColor.Primary"/>
        </PreviousPageButtonTemplate>
        <LastPageButtonTemplate>
            <Icon Name="IconName.Forward" TextColor="TextColor.Primary"/>
        </LastPageButtonTemplate>
        <FirstPageButtonTemplate>
            <Icon Name="IconName.Backward" TextColor="TextColor.Primary"/>
        </FirstPageButtonTemplate>
        <TotalItemsTemplate>
            <Badge Color="Color.Primary">@context.TotalItems total items</Badge>
        </TotalItemsTemplate>
        <TotalItemsShortTemplate>
            <Badge Color="Color.Primary">@context.TotalItems</Badge>
        </TotalItemsShortTemplate>
        <ItemsPerPageTemplate></ItemsPerPageTemplate>
        <PageSelectorTemplate>
            <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
                @for (var i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
                {
                    var pageNumber = i;
                    <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                }
            </Select>
        </PageSelectorTemplate>
        <PageSizesTemplate>
            <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPageSize" Size="Size.Small">
                @foreach (var curPageSize in context.PageSizes)
                {
                    <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                }
            </Select>
        </PageSizesTemplate>
    </DataGrid>
}

@code {
    DataGrid<PokemonTrainer> _trainerDataGrid = new();
    DataGrid<Pokemon> _pokemonDataGrid = new();

    PokeApiClient _pokeApiClient = new();

    List<PokemonTrainer> _trainers = new();

    protected override async Task OnInitializedAsync()
    {
        var text = await Http.GetStringAsync("sample-data/sample-essentials-trainers.txt");

        var trainers = text.Split("#-------------------------------");

        List<Pokemon> team = new();

        foreach (var t in trainers)
        {
            if (string.IsNullOrWhiteSpace(t)) break;

            var lines = t.Split(Environment.NewLine);

            var pokes = lines.Where(l => l.StartsWith("Pokemon"));

            team.AddRange(pokes.Select(pokeLine => pokeLine.Split('=')[1].Split(',')[0].Trim())
                .Select(pokeName => new Pokemon { Name = pokeName }));

            var line = lines.First(l => l.StartsWith("["));
            var trainerLine = line.Substring(1, line.Length - 3).Split(',');

            _trainers.Add(new PokemonTrainer
            {
                Name = trainerLine[1],
                TrainerType = Enum.Parse<TrainerTypes>(trainerLine[0]),
                Team = team
            });

            team = new List<Pokemon>();
        }
    }

    private async Task LoadTeam(IList<Pokemon> team)
    {
        for (var i = 0; i < team.Count; i++)
        {
            team[i] = await _pokeApiClient.GetResourceAsync<Pokemon>(team[i].Name);
        }
    }

}